/**
 * Django Sandbox - Run Django in the browser with pyodide
 * Usage: <script src="django-sandbox.js" data-packages="django-bird,pillow"></script>
 */

class DjangoSandbox {
  constructor(config = {}) {
    this.config = {
      packages: [],
      pyodideVersion: '0.27.6',
      pyodideUrl: null, // Will be constructed from version
      autoInit: true,
      ...config
    };

    // Construct pyodide URL if not provided
    if (!this.config.pyodideUrl) {
      this.config.pyodideUrl = `https://cdn.jsdelivr.net/pyodide/v${this.config.pyodideVersion}/full/pyodide.js`;
    }

    // State
    this.pyodide = null;
    this.ready = false;
    this.loading = false;
    this.error = null;

    // Event system
    this.eventTarget = new EventTarget();
  }

  /**
   * Initialize Django sandbox
   */
  async init() {
    if (this.loading || this.ready) {
      return;
    }

    this.loading = true;
    this.error = null;

    try {
      // Load pyodide
      this.emit('loading', { step: 'pyodide', message: 'Loading Pyodide runtime...' });
      await this.loadPyodide();

      // Install packages
      this.emit('loading', { step: 'packages', message: 'Installing Python packages...' });
      await this.installPackages();

      // Setup Django
      this.emit('loading', { step: 'django', message: 'Configuring Django...' });
      await this.setupDjango();

      // Ready!
      this.ready = true;
      this.loading = false;
      this.emit('ready', { message: 'Django sandbox ready!' });

    } catch (error) {
      this.error = error;
      this.loading = false;
      this.emit('error', { error, message: error.message });
      throw error;
    }
  }

  /**
   * Load pyodide runtime
   */
  async loadPyodide() {
    // Check if pyodide is already loaded
    if (window.loadPyodide) {
      this.pyodide = await window.loadPyodide();
      return;
    }

    // Dynamically load pyodide script
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = this.config.pyodideUrl;
      script.onload = async () => {
        try {
          this.pyodide = await window.loadPyodide();
          resolve();
        } catch (error) {
          reject(new Error(`Failed to initialize pyodide: ${error.message}`));
        }
      };
      script.onerror = () => {
        reject(new Error(`Failed to load pyodide from ${this.config.pyodideUrl}`));
      };
      document.head.appendChild(script);
    });
  }

  /**
   * Install Python packages
   */
  async installPackages() {
    // Install micropip first
    await this.pyodide.loadPackage("micropip");
    const micropip = this.pyodide.pyimport("micropip");

    // Install Django
    await micropip.install("django");

    // Install additional packages
    for (const pkg of this.config.packages) {
      if (pkg.trim()) {
        await micropip.install(pkg.trim());
      }
    }
  }

  /**
   * Setup Django configuration
   */
  async setupDjango() {
    this.pyodide.runPython(`
import os
from django.conf import settings

# Create virtual filesystem
os.makedirs('/templates', exist_ok=True)

# Configure Django if not already configured
if not settings.configured:
    settings.configure(
        DEBUG=True,
        SECRET_KEY='django-sandbox-secret-key',
        INSTALLED_APPS=[
            'django.contrib.contenttypes',
            'django.contrib.auth',
        ],
        TEMPLATES=[{
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': ['/templates'],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                ],
            },
        }],
        USE_TZ=True,
    )

# Setup Django
import django
django.setup()

# Import template system
from django.template import Template, Context
import traceback

def render_template(template_string, context_dict=None):
    """Render a Django template with the given context"""
    if context_dict is None:
        context_dict = {}
    
    try:
        template = Template(template_string)
        context = Context(context_dict)
        return {
            'success': True,
            'result': template.render(context),
            'error': None
        }
    except Exception as e:
        return {
            'success': False,
            'result': None,
            'error': str(e),
            'traceback': traceback.format_exc()
        }

# Make functions available globally in Python
globals()['render_template'] = render_template

print("Django sandbox ready!")
    `);
  }

  /**
   * Render a Django template
   */
  renderTemplate(templateString, context = {}) {
    if (!this.ready) {
      throw new Error('Django sandbox not ready. Call init() first or wait for ready event.');
    }

    try {
      // Set variables in Python
      this.pyodide.globals.set("template_str", templateString);
      this.pyodide.globals.set("context_dict", context);

      // Call Python function and get result
      const result = this.pyodide.runPython(`render_template(template_str, context_dict)`);
      const resultObj = result.toJs();

      if (resultObj.get('success')) {
        return resultObj.get('result');
      } else {
        throw new Error(resultObj.get('error'));
      }
    } catch (error) {
      throw new Error(`Template rendering failed: ${error.message}`);
    }
  }

  /**
   * Run arbitrary Python code
   */
  runPython(code) {
    if (!this.ready) {
      throw new Error('Django sandbox not ready. Call init() first or wait for ready event.');
    }

    return this.pyodide.runPython(code);
  }

  /**
   * Check if sandbox is ready
   */
  isReady() {
    return this.ready;
  }

  /**
   * Get list of installed packages
   */
  getPackages() {
    return this.config.packages;
  }

  /**
   * Emit an event
   */
  emit(eventType, detail = {}) {
    const event = new CustomEvent(eventType, { detail });
    this.eventTarget.dispatchEvent(event);
    
    // Also emit on window for global listening
    window.dispatchEvent(new CustomEvent(`django-sandbox:${eventType}`, { detail }));
  }

  /**
   * Add event listener
   */
  addEventListener(type, listener, options) {
    this.eventTarget.addEventListener(type, listener, options);
  }

  /**
   * Remove event listener
   */
  removeEventListener(type, listener, options) {
    this.eventTarget.removeEventListener(type, listener, options);
  }
}

// Auto-initialization logic
(function() {
  // Parse configuration from current script tag
  const currentScript = document.currentScript;
  if (!currentScript) return;

  const config = {
    packages: currentScript.dataset.packages ? 
      currentScript.dataset.packages.split(',').map(p => p.trim()).filter(Boolean) : [],
    pyodideVersion: currentScript.dataset.pyodideVersion || '0.27.6',
    pyodideUrl: currentScript.dataset.pyodideUrl || null,
    autoInit: currentScript.dataset.autoInit !== 'false'
  };

  // Create singleton instance
  const sandbox = new DjangoSandbox(config);
  
  // Make available globally - just the instance, not the class
  window.DjangoSandbox = sandbox;

  // Auto-initialize if requested
  if (config.autoInit) {
    const initWhenReady = () => {
      sandbox.init().catch(error => {
        console.error('Django sandbox initialization failed:', error);
      });
    };

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initWhenReady);
    } else {
      // DOM is already ready
      setTimeout(initWhenReady, 0);
    }
  }
})();

// Export for module usage
if (typeof module !== 'undefined' && module.exports) {
  module.exports = DjangoSandbox;
}